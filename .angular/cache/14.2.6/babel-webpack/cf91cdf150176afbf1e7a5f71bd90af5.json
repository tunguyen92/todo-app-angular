{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport SockJS from \"../modules/sockjs-client/index.js\";\nimport { log } from \"../utils/log.js\";\n\nvar SockJSClient = /*#__PURE__*/function () {\n  /**\n   * @param {string} url\n   */\n  function SockJSClient(url) {\n    _classCallCheck(this, SockJSClient); // SockJS requires `http` and `https` protocols\n\n\n    this.sock = new SockJS(url.replace(/^ws:/i, \"http:\").replace(/^wss:/i, \"https:\"));\n\n    this.sock.onerror =\n    /**\n     * @param {Error} error\n     */\n    function (error) {\n      log.error(error);\n    };\n  }\n  /**\n   * @param {(...args: any[]) => void} f\n   */\n\n\n  _createClass(SockJSClient, [{\n    key: \"onOpen\",\n    value: function onOpen(f) {\n      this.sock.onopen = f;\n    }\n    /**\n     * @param {(...args: any[]) => void} f\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(f) {\n      this.sock.onclose = f;\n    } // call f with the message string as the first argument\n\n    /**\n     * @param {(...args: any[]) => void} f\n     */\n\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(f) {\n      this.sock.onmessage =\n      /**\n       * @param {Error & { data: string }} e\n       */\n      function (e) {\n        f(e.data);\n      };\n    }\n  }]);\n\n  return SockJSClient;\n}();\n\nexport { SockJSClient as default };","map":null,"metadata":{},"sourceType":"module"}